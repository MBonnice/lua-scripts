function plugindef()finaleplugin.RequireSelection=true;finaleplugin.MinJWLuaVersion=0.60;finaleplugin.Author="Carl Vine"finaleplugin.Copyright="CC0 https://creativecommons.org/publicdomain/zero/1.0/"finaleplugin.Version="0.57"finaleplugin.Date="2022/05/22"finaleplugin.AuthorURL="http://carlvine.com"finaleplugin.Notes=[[
This script requires RGPLua 0.60 or later and does not work under JWLua.
(see: https://robertgpatterson.com/-fininfo/-rgplua/rgplua.html)

This script is keyboard focussed with minimal mouse action allowing rapid entry of complex time signatures with a few keystrokes. It supports composite numerators allowing meters like (3+2+3/16) in conjunction with further composites (e.g. (3+2+3/16)+(1/4)+(5+4/8)). Alternate "display" time signatures can be equally complex. At startup the script shows the time signature of the first selected measure. Click the "Clear All" button to revert to a simple 4/4 with no other options. (or, ideally, use a keyboard macro app like Keyboard Maestro to click the button in response to a keystroke!)

All measures in the currently selected region will be assigned the new time signature. If one measure is selected only it will be affected. (Unlike the default Finale behaviour of "change every measure until next meter change").

"Bottom" numbers (denominators) are the usual "note" numbers - 2, 4, 8, 16, 32 or 64. "Top" numbers (numerators) must be integers, optionally joined by '+' signs. Multiples of 3 will automatically convert to compound signatures so, for instance, (9/16) will convert to three groups of dotted 8ths. To suppress automatic compounding, instead of the bottom 'note' number enter its EDU equivalent (quarter note = 1024; eighth note = 512 etc) but be careful since Finale can get confused if the number is inappropriate.

Empty and zero "Top" numbers are ignored. If the "Secondary" Top is zero, "Tertiary" values are ignored. Finale's Time Signature tool will also accept "Top" numbers with decimals but I haven't allowed for that in this script.
]]return"Meter Set Numeric","Meter Set Numeric","Set the Meter Numerically"end;function user_chooses_meter(a,b)local c={0,70,130,210,290,300}local d={0,20,40,60,82,115,135,155,175}local e=b.StartMeasure;local f=b.EndMeasure;local g=19;local h=finenv.UI():IsOnMac()and 3 or 0;local i={}local j="m. "..e;if f~=e then j="m"..j.."-"..f end;local k=finale.FCCustomLuaWindow()local l=finale.FCString()l.LuaString=plugindef()k:SetTitle(l)k:CreateHorizontalLine(c[1],d[6]-9,c[5]+80)local m={{"TIME SIGNATURE:",c[1],d[1]},{"TOP",c[3],d[1]},{"BOTTOM",c[4],d[1]},{"PRIMARY",c[2],d[2]},{"Selection:",c[6],d[2]+5},{"SECONDARY",c[2]-g,d[3]},{j,c[6],d[3]},{"TERTIARY",c[2]-3,d[4]},{"('TOP' entries can include integers joined by '+')",c[2]-30,d[5]},{"DISPLAY SIGNATURE:",c[1],d[6]},{"(set to \"0\" for none)",c[3],d[6]},{"PRIMARY",c[2],d[7]},{"SECONDARY",c[2]-g,d[8]},{"TERTIARY",c[2]-3,d[9]}}for n,o in ipairs(m)do local p=k:CreateStatic(o[2],o[3])l.LuaString=o[1]p:SetText(l)p:SetWidth(#o[1]*6+20)end;for n,o in ipairs(a)do local q=math.floor((n-1)/2)+2;if n>6 then q=q+2 end;local r=4-n%2;i[n]=k:CreateEdit(c[r],d[q]-h)i[n]:SetWidth(70)l.LuaString=o;if n%2==1 then i[n]:SetText(l)else i[n]:SetInteger(o)end end;local s=k:CreateButton(c[5],d[1]-2)l.LuaString="Clear All"s:SetWidth(80)s:SetText(l)k:RegisterHandleControlEvent(s,function(t)local l=finale.FCString()l.LuaString="4"i[1]:SetText(l)i[2]:SetInteger(4)l.LuaString="0"for n=3,11,2 do i[n]:SetText(l)i[n+1]:SetInteger(0)end;i[1]:SetFocus()end)k:CreateOkButton()k:CreateCancelButton()local u=k:ExecuteModal(nil)for n=1,#a do if n%2==1 then i[n]:GetText(l)a[n]=l.LuaString else a[n]=i[n]:GetInteger()end end;return u end;function encode_existing_meter(v,a,w)if v.CompositeTop then local x=v:CreateCompositeTop()local y=x:GetGroupCount()if y>3 then y=3 end;for n=0,y-1 do local z=""for A=0,x:GetGroupElementCount(n)-1 do if A>0 then z=z.."+"end;z=z..x:GetGroupElementBeats(n,A)end;a[n*2+w]=z end else a[w]=""..v.Beats end;if v.CompositeBottom then local B=v:CreateCompositeBottom()local y=B:GetGroupCount()if y>3 then y=3 end;for n=0,y-1 do local C=B:GetGroupElementBeatDuration(n,0)local D=n*2+w;if C%3==0 and not string.find(a[D],"+")then a[D]=""..a[D]*3;C=C/3 end;a[D+1]=math.floor(4096/C)end else local C=v.BeatDuration;if C%3==0 and not string.find(a[w],"+")then a[w]=""..a[w]*3;C=C/3 end;a[w+1]=math.floor(4096/C)end end;function copy_meters_from_score(a,E)local F=finale.FCMeasure()F:Load(E)encode_existing_meter(F:GetTimeSignature(),a,1)if F.UseTimeSigForDisplay then encode_existing_meter(F.TimeSignatureForDisplay,a,7)end end;function is_positive_integer(G)return G~=nil and G>0 and G%1==0 end;function is_power_of_two(H)local I=1;while I<H do I=I*2 end;return I==H end;function convert_meter_pairs_to_numbers(J,a)if a[J]=="0"or a[J]==""then a[J]={0}if J==1 then return"Primary time signature can not be zero"else return""end end;if string.find(a[J],"[+ -/]")then local K=a[J]a[J]={}for L in string.gmatch(K,"[0-9]+")do local M=tonumber(L)if not is_positive_integer(M)then return"All numbers must be positive integers\n(not "..M..")"end;table.insert(a[J],M)end else local M=tonumber(a[J])if not is_positive_integer(M)then return"All numbers must be positive integers\n(not "..M..")"end;a[J]={M}end;local N=J+1;local O=a[N]if O==0 then return""end;if not is_positive_integer(O)then return"All numbers must be positive integers\n(not "..O..")"end;if O<=64 then if not is_power_of_two(O)then return"Denominators must be powers of 2\n(not "..O..")"end;O=4096/O;if#a[J]==1 then local P=a[J][1]if J<7 and P%3==0 and O<1024 then a[J][1]=P/3;O=O*3 end end;a[N]=O end;return""end;function new_composite_top(Q,R,S)local T=finale.FCCompositeTimeSigTop()local U=T:AddGroup(#Q)for n=1,#Q do T:SetGroupElementBeats(U,n-1,Q[n])end;if R[1]~=0 then U=T:AddGroup(#R)for n=1,#R do T:SetGroupElementBeats(U,n-1,R[n])end;if S[1]~=0 then U=T:AddGroup(#S)for n=1,#S do T:SetGroupElementBeats(U,n-1,S[n])end end end;T:SaveAll()return T end;function new_composite_bottom(V,W,X)local Y=finale.FCCompositeTimeSigBottom()local Z=Y:AddGroup(1)Y:SetGroupElementBeatDuration(Z,0,V)if W>0 then Z=Y:AddGroup(1)Y:SetGroupElementBeatDuration(Z,0,W)if X>0 then Z=Y:AddGroup(1)Y:SetGroupElementBeatDuration(Z,0,X)end end;Y:SaveAll()return Y end;function fix_new_top(T,v,P)if T~=nil then v:SaveNewCompositeTop(T)else if v:GetCompositeTop()then v:RemoveCompositeTop(P)else v.Beats=P end end end;function fix_new_bottom(Y,v,O)if Y~=nil then v:SaveNewCompositeBottom(Y)else if v:GetCompositeBottom()then v:RemoveCompositeBottom(O)else v.BeatDuration=O end end end;function create_new_meter()local b=finenv.Region()local a={"4",4,"0",0,"0",0,"0",0,"0",0,"0",0}local _=""copy_meters_from_score(a,b.StartMeasure)local u=user_chooses_meter(a,b)if u~=finale.EXECMODAL_OK then return end;for a0=1,11,2 do _=convert_meter_pairs_to_numbers(a0,a)if _~=""then finenv.UI():AlertNeutral(plugindef(),_)return end end;local a1={nil,nil,nil,nil}for n=0,1 do local a2=n*6;if#a[a2+1]>1 or a[a2+3][1]~=0 then a1[n*2+1]=new_composite_top(a[a2+1],a[a2+3],a[a2+5])end;if a1[n*2+1]~=nil and a[a2+3][1]~=0 then a1[n*2+2]=new_composite_bottom(a[a2+2],a[a2+4],a[a2+6])end end;b.StartMeasurePos=0;b:SetEndMeasurePosRight()b:SetFullMeasureStack()local a3=finale.FCMeasures()a3:LoadRegion(b)for F in each(a3)do local v=F:GetTimeSignature()fix_new_top(a1[1],v,a[1][1])fix_new_bottom(a1[2],v,a[2])v:Save()if a[7][1]~=0 then F.UseTimeSigForDisplay=true;local a4=F.TimeSignatureForDisplay;if a4 then fix_new_top(a1[3],a4,a[7][1])fix_new_bottom(a1[4],a4,a[8])a4:Save()end else F.UseTimeSigForDisplay=false end;F:Save()end end;create_new_meter()