local a,b,c,d=(function(e)local f={[{}]=true}local g;local h={}local require;local i={}g=function(j,k)if not h[j]then h[j]=k end end;require=function(j)local l=i[j]if l then if l==f then return nil end else if not h[j]then if not e then local m=type(j)=='string'and'\"'..j..'\"'or tostring(j)error('Tried to require '..m..', but no such module has been registered')else return e(j)end end;i[j]=f;l=h[j](require,i,g,h)i[j]=l end;return l end;return require,i,g,h end)(require)c("__root",function(require,n,c,d)function plugindef()finaleplugin.RequireSelection=true;finaleplugin.Author="Carl Vine"finaleplugin.AuthorURL="http://carlvine.com"finaleplugin.Copyright="CC0 https://creativecommons.org/publicdomain/zero/1.0/"finaleplugin.Version="v1.47"finaleplugin.Date="2022/05/16"finaleplugin.Notes=[[
        This script explodes a set of chords from one staff into pairs of notes, top to bottom, on subsequent staves. 
        Chords may contain different numbers of notes, the number of destination staves determined by the chord with the largest number of notes.
        It duplicates all markings from the original, and resets the current clef for each destination staff.
        It warns if pre-existing music in the destination will be erased. 
        
        This script allows for the following configuration:

        ```
        fix_note_spacing = true -- to respace music automatically when the script finishes
        ```
    ]]return"Staff Explode Pairs","Staff Explode Pairs","Staff Explode as pairs of notes onto consecutive single staves"end;local o=require("library.configuration")local p=require("library.clef")local q={fix_note_spacing=true}o.get_parameters("staff_explode_pairs.config.txt",q)function show_error(r)local s={need_more_staves="There are not enough empty\nstaves to explode onto",only_one_staff="Please select only one staff!",empty_region="Please select a region\nwith some notes in it!",three_or_more="Explode Pairs needs\nthree or more notes per chord"}finenv.UI():AlertNeutral("script: "..plugindef(),s[r])return-1 end;function should_overwrite_existing_music()local t=finenv.UI():AlertOkCancel("script: "..plugindef(),"Overwrite existing music?")local u=t==0;return u end;function get_note_count(v)local w=0;for x in eachentry(v)do if x.Count>0 then if w<x.Count then w=x.Count end end end;if w==0 then return show_error("empty_region")elseif w<3 then return show_error("three_or_more")end;return w end;function ensure_score_has_enough_staves(y,z)local A=finale.FCStaves()A:LoadAll()if z>A.Count-y+1 then return false end;return true end;function staff_explode()local v=finale.FCMusicRegion()v:SetCurrentSelection()if v:CalcStaffSpan()>1 then return show_error("only_one_staff")end;local B=v.StartSlot;local C=v.StartMeasure;local D=v.EndMeasure;local E={}E[1]=v;local F=get_note_count(v)if F<=0 then return end;local z=math.floor(F/2+0.5)if not ensure_score_has_enough_staves(B,z)then show_error("need_more_staves")return end;local G=true;for y=2,z do E[y]=finale.FCMusicRegion()E[y]:SetRegion(E[1])E[y]:CopyMusic()local H=B+y-1;E[y].StartSlot=H;E[y].EndSlot=H;if G then for x in eachentry(E[y])do if x.Count>0 then G=false;break end end end end;if G or should_overwrite_existing_music()then for y=1,z do if y>1 then E[y]:PasteMusic()p.restore_default_clef(C,D,E[y].StartStaff)end;local I=(y-1)*2;for x in eachentrysaved(E[y])do if x:IsNote()then local J=x.Count-y*2;if I>0 then for K=1,I do x:DeleteNote(x:CalcHighestNote(nil))end end;if J>0 then for K=1,J do x:DeleteNote(x:CalcLowestNote(nil))end end end end end;if q.fix_note_spacing then E[1]:SetFullMeasureStack()E[1]:SetInDocument()finenv.UI():MenuCommand(finale.MENUCMD_NOTESPACING)E[1].StartSlot=B;E[1].EndSlot=B;E[1]:SetInDocument()end end;for y=2,z do E[y]:ReleaseMusic()end;finenv:Region():SetInDocument()end;staff_explode()end)c("library.clef",function(require,n,c,d)local L={}function L.finale_version(M,N,O)local P=bit32.bor(bit32.lshift(math.floor(M),24),bit32.lshift(math.floor(N),20))if O then P=bit32.bor(P,math.floor(O))end;return P end;function L.group_overlaps_region(Q,R)if R:IsFullDocumentSpan()then return true end;local S=false;local T=finale.FCSystemStaves()T:LoadAllForRegion(R)for U in each(T)do if Q:ContainsStaff(U:GetStaff())then S=true;break end end;if not S then return false end;if Q.StartMeasure>R.EndMeasure or Q.EndMeasure<R.StartMeasure then return false end;return true end;function L.group_is_contained_in_region(Q,R)if not R:IsStaffIncluded(Q.StartStaff)then return false end;if not R:IsStaffIncluded(Q.EndStaff)then return false end;return true end;function L.staff_group_is_multistaff_instrument(Q)local V=finale.FCMultiStaffInstruments()V:LoadAll()for W in each(V)do if W:ContainsStaff(Q.StartStaff)and W.GroupID==Q:GetItemID()then return true end end;return false end;function L.get_selected_region_or_whole_doc()local X=finenv.Region()if X:IsEmpty()then X:SetFullDocument()end;return X end;function L.get_first_cell_on_or_after_page(Y)local Z=Y;local _=finale.FCPage()local a0=false;while _:Load(Z)do if _:GetFirstSystem()>0 then a0=true;break end;Z=Z+1 end;if a0 then local a1=finale.FCStaffSystem()a1:Load(_:GetFirstSystem())return finale.FCCell(a1.FirstMeasure,a1.TopStaff)end;local a2=finale.FCMusicRegion()a2:SetFullDocument()return finale.FCCell(a2.EndMeasure,a2.EndStaff)end;function L.get_top_left_visible_cell()if not finenv.UI():IsPageView()then local a3=finale.FCMusicRegion()a3:SetFullDocument()return finale.FCCell(finenv.UI():GetCurrentMeasure(),a3.StartStaff)end;return L.get_first_cell_on_or_after_page(finenv.UI():GetCurrentPage())end;function L.get_top_left_selected_or_visible_cell()local X=finenv.Region()if not X:IsEmpty()then return finale.FCCell(X.StartMeasure,X.StartStaff)end;return L.get_top_left_visible_cell()end;function L.is_default_measure_number_visible_on_cell(a4,a5,a6,a7)local a8=finale.FCCurrentStaffSpec()if not a8:LoadForCell(a5,0)then return false end;if a4:GetShowOnTopStaff()and a5.Staff==a6.TopStaff then return true end;if a4:GetShowOnBottomStaff()and a5.Staff==a6:CalcBottomStaff()then return true end;if a8.ShowMeasureNumbers then return not a4:GetExcludeOtherStaves(a7)end;return false end;function L.is_default_number_visible_and_left_aligned(a4,a5,a9,a7,aa)if a4.UseScoreInfoForParts then a7=false end;if aa and a4:GetShowOnMultiMeasureRests(a7)then if finale.MNALIGN_LEFT~=a4:GetMultiMeasureAlignment(a7)then return false end elseif a5.Measure==a9.FirstMeasure then if not a4:GetShowOnSystemStart()then return false end;if finale.MNALIGN_LEFT~=a4:GetStartAlignment(a7)then return false end else if not a4:GetShowMultiples(a7)then return false end;if finale.MNALIGN_LEFT~=a4:GetMultipleAlignment(a7)then return false end end;return L.is_default_measure_number_visible_on_cell(a4,a5,a9,a7)end;function L.update_layout(ab,ac)ab=ab or 1;ac=ac or false;local ad=finale.FCPage()if ad:Load(ab)then ad:UpdateLayout(ac)end end;function L.get_current_part()local ae=finale.FCParts()ae:LoadAll()return ae:GetCurrent()end;function L.get_page_format_prefs()local af=L.get_current_part()local ag=finale.FCPageFormatPrefs()local ah=false;if af:IsScore()then ah=ag:LoadScore()else ah=ag:LoadParts()end;return ag,ah end;local ai=function(aj)local ak=finenv.UI():IsOnWindows()local al=function(am,an)if finenv.UI():IsOnWindows()then return am and os.getenv(am)or""else return an and os.getenv(an)or""end end;local ao=aj and al("LOCALAPPDATA","HOME")or al("COMMONPROGRAMFILES")if not ak then ao=ao.."/Library/Application Support"end;ao=ao.."/SMuFL/Fonts/"return ao end;function L.get_smufl_font_list()local ap={}local aq=function(aj)local ao=ai(aj)local ar=function()if finenv.UI():IsOnWindows()then return io.popen('dir "'..ao..'" /b /ad')else return io.popen('ls "'..ao..'"')end end;local as=function(at)local au=finale.FCString()au.LuaString=at;return finenv.UI():IsFontAvailable(au)end;for at in ar():lines()do if not at:find("%.")then at=at:gsub(" Bold","")at=at:gsub(" Italic","")local au=finale.FCString()au.LuaString=at;if ap[at]or as(at)then ap[at]=aj and"user"or"system"end end end end;aq(true)aq(false)return ap end;function L.get_smufl_metadata_file(av)if not av then av=finale.FCFontInfo()av:LoadFontPrefs(finale.FONTPREF_MUSIC)end;local aw=function(ax,av)local ay=ax..av.Name.."/"..av.Name..".json"return io.open(ay,"r")end;local az=aw(ai(true),av)if az then return az end;return aw(ai(false),av)end;function L.is_font_smufl_font(av)if not av then av=finale.FCFontInfo()av:LoadFontPrefs(finale.FONTPREF_MUSIC)end;if finenv.RawFinaleVersion>=L.finale_version(27,1)then if nil~=av.IsSMuFLFont then return av.IsSMuFLFont end end;local aA=L.get_smufl_metadata_file(av)if nil~=aA then io.close(aA)return true end;return false end;function L.simple_input(aB,aC)local aD=finale.FCString()aD.LuaString=""local aE=finale.FCString()local aF=160;function format_ctrl(aG,aH,aI,aJ)aG:SetHeight(aH)aG:SetWidth(aI)aE.LuaString=aJ;aG:SetText(aE)end;title_width=string.len(aB)*6+54;if title_width>aF then aF=title_width end;text_width=string.len(aC)*6;if text_width>aF then aF=text_width end;aE.LuaString=aB;local aK=finale.FCCustomLuaWindow()aK:SetTitle(aE)local aL=aK:CreateStatic(0,0)format_ctrl(aL,16,aF,aC)local aM=aK:CreateEdit(0,20)format_ctrl(aM,20,aF,"")aK:CreateOkButton()aK:CreateCancelButton()function callback(aG)end;aK:RegisterHandleCommand(callback)if aK:ExecuteModal(nil)==finale.EXECMODAL_OK then aD.LuaString=aM:GetText(aD)return aD.LuaString end end;function L.is_finale_object(aN)return aN and type(aN)=="userdata"and aN.ClassName and aN.GetClassID and true or false end;function L.system_indent_set_to_prefs(a9,ag)ag=ag or L.get_page_format_prefs()local aO=finale.FCMeasure()local aP=a9.FirstMeasure==1;if not aP and aO:Load(a9.FirstMeasure)then if aO.ShowFullNames then aP=true end end;if aP and ag.UseFirstSystemMargins then a9.LeftMargin=ag.FirstSystemLeft else a9.LeftMargin=ag.SystemLeft end;return a9:Save()end;function L.calc_script_name(aQ)local aR=finale.FCString()if finenv.RunningLuaFilePath then aR.LuaString=finenv.RunningLuaFilePath()else aR:SetRunningLuaFilePath()end;local aS=finale.FCString()aR:SplitToPathAndFile(nil,aS)local P=aS.LuaString;if not aQ then P=P:match("(.+)%..+")if not P or P==""then P=aS.LuaString end end;return P end;return L end)c("library.configuration",function(require,n,c,d)local L={}function L.finale_version(M,N,O)local P=bit32.bor(bit32.lshift(math.floor(M),24),bit32.lshift(math.floor(N),20))if O then P=bit32.bor(P,math.floor(O))end;return P end;function L.group_overlaps_region(Q,R)if R:IsFullDocumentSpan()then return true end;local S=false;local T=finale.FCSystemStaves()T:LoadAllForRegion(R)for U in each(T)do if Q:ContainsStaff(U:GetStaff())then S=true;break end end;if not S then return false end;if Q.StartMeasure>R.EndMeasure or Q.EndMeasure<R.StartMeasure then return false end;return true end;function L.group_is_contained_in_region(Q,R)if not R:IsStaffIncluded(Q.StartStaff)then return false end;if not R:IsStaffIncluded(Q.EndStaff)then return false end;return true end;function L.staff_group_is_multistaff_instrument(Q)local V=finale.FCMultiStaffInstruments()V:LoadAll()for W in each(V)do if W:ContainsStaff(Q.StartStaff)and W.GroupID==Q:GetItemID()then return true end end;return false end;function L.get_selected_region_or_whole_doc()local X=finenv.Region()if X:IsEmpty()then X:SetFullDocument()end;return X end;function L.get_first_cell_on_or_after_page(Y)local Z=Y;local _=finale.FCPage()local a0=false;while _:Load(Z)do if _:GetFirstSystem()>0 then a0=true;break end;Z=Z+1 end;if a0 then local a1=finale.FCStaffSystem()a1:Load(_:GetFirstSystem())return finale.FCCell(a1.FirstMeasure,a1.TopStaff)end;local a2=finale.FCMusicRegion()a2:SetFullDocument()return finale.FCCell(a2.EndMeasure,a2.EndStaff)end;function L.get_top_left_visible_cell()if not finenv.UI():IsPageView()then local a3=finale.FCMusicRegion()a3:SetFullDocument()return finale.FCCell(finenv.UI():GetCurrentMeasure(),a3.StartStaff)end;return L.get_first_cell_on_or_after_page(finenv.UI():GetCurrentPage())end;function L.get_top_left_selected_or_visible_cell()local X=finenv.Region()if not X:IsEmpty()then return finale.FCCell(X.StartMeasure,X.StartStaff)end;return L.get_top_left_visible_cell()end;function L.is_default_measure_number_visible_on_cell(a4,a5,a6,a7)local a8=finale.FCCurrentStaffSpec()if not a8:LoadForCell(a5,0)then return false end;if a4:GetShowOnTopStaff()and a5.Staff==a6.TopStaff then return true end;if a4:GetShowOnBottomStaff()and a5.Staff==a6:CalcBottomStaff()then return true end;if a8.ShowMeasureNumbers then return not a4:GetExcludeOtherStaves(a7)end;return false end;function L.is_default_number_visible_and_left_aligned(a4,a5,a9,a7,aa)if a4.UseScoreInfoForParts then a7=false end;if aa and a4:GetShowOnMultiMeasureRests(a7)then if finale.MNALIGN_LEFT~=a4:GetMultiMeasureAlignment(a7)then return false end elseif a5.Measure==a9.FirstMeasure then if not a4:GetShowOnSystemStart()then return false end;if finale.MNALIGN_LEFT~=a4:GetStartAlignment(a7)then return false end else if not a4:GetShowMultiples(a7)then return false end;if finale.MNALIGN_LEFT~=a4:GetMultipleAlignment(a7)then return false end end;return L.is_default_measure_number_visible_on_cell(a4,a5,a9,a7)end;function L.update_layout(ab,ac)ab=ab or 1;ac=ac or false;local ad=finale.FCPage()if ad:Load(ab)then ad:UpdateLayout(ac)end end;function L.get_current_part()local ae=finale.FCParts()ae:LoadAll()return ae:GetCurrent()end;function L.get_page_format_prefs()local af=L.get_current_part()local ag=finale.FCPageFormatPrefs()local ah=false;if af:IsScore()then ah=ag:LoadScore()else ah=ag:LoadParts()end;return ag,ah end;local ai=function(aj)local ak=finenv.UI():IsOnWindows()local al=function(am,an)if finenv.UI():IsOnWindows()then return am and os.getenv(am)or""else return an and os.getenv(an)or""end end;local ao=aj and al("LOCALAPPDATA","HOME")or al("COMMONPROGRAMFILES")if not ak then ao=ao.."/Library/Application Support"end;ao=ao.."/SMuFL/Fonts/"return ao end;function L.get_smufl_font_list()local ap={}local aq=function(aj)local ao=ai(aj)local ar=function()if finenv.UI():IsOnWindows()then return io.popen('dir "'..ao..'" /b /ad')else return io.popen('ls "'..ao..'"')end end;local as=function(at)local au=finale.FCString()au.LuaString=at;return finenv.UI():IsFontAvailable(au)end;for at in ar():lines()do if not at:find("%.")then at=at:gsub(" Bold","")at=at:gsub(" Italic","")local au=finale.FCString()au.LuaString=at;if ap[at]or as(at)then ap[at]=aj and"user"or"system"end end end end;aq(true)aq(false)return ap end;function L.get_smufl_metadata_file(av)if not av then av=finale.FCFontInfo()av:LoadFontPrefs(finale.FONTPREF_MUSIC)end;local aw=function(ax,av)local ay=ax..av.Name.."/"..av.Name..".json"return io.open(ay,"r")end;local az=aw(ai(true),av)if az then return az end;return aw(ai(false),av)end;function L.is_font_smufl_font(av)if not av then av=finale.FCFontInfo()av:LoadFontPrefs(finale.FONTPREF_MUSIC)end;if finenv.RawFinaleVersion>=L.finale_version(27,1)then if nil~=av.IsSMuFLFont then return av.IsSMuFLFont end end;local aA=L.get_smufl_metadata_file(av)if nil~=aA then io.close(aA)return true end;return false end;function L.simple_input(aB,aC)local aD=finale.FCString()aD.LuaString=""local aE=finale.FCString()local aF=160;function format_ctrl(aG,aH,aI,aJ)aG:SetHeight(aH)aG:SetWidth(aI)aE.LuaString=aJ;aG:SetText(aE)end;title_width=string.len(aB)*6+54;if title_width>aF then aF=title_width end;text_width=string.len(aC)*6;if text_width>aF then aF=text_width end;aE.LuaString=aB;local aK=finale.FCCustomLuaWindow()aK:SetTitle(aE)local aL=aK:CreateStatic(0,0)format_ctrl(aL,16,aF,aC)local aM=aK:CreateEdit(0,20)format_ctrl(aM,20,aF,"")aK:CreateOkButton()aK:CreateCancelButton()function callback(aG)end;aK:RegisterHandleCommand(callback)if aK:ExecuteModal(nil)==finale.EXECMODAL_OK then aD.LuaString=aM:GetText(aD)return aD.LuaString end end;function L.is_finale_object(aN)return aN and type(aN)=="userdata"and aN.ClassName and aN.GetClassID and true or false end;function L.system_indent_set_to_prefs(a9,ag)ag=ag or L.get_page_format_prefs()local aO=finale.FCMeasure()local aP=a9.FirstMeasure==1;if not aP and aO:Load(a9.FirstMeasure)then if aO.ShowFullNames then aP=true end end;if aP and ag.UseFirstSystemMargins then a9.LeftMargin=ag.FirstSystemLeft else a9.LeftMargin=ag.SystemLeft end;return a9:Save()end;function L.calc_script_name(aQ)local aR=finale.FCString()if finenv.RunningLuaFilePath then aR.LuaString=finenv.RunningLuaFilePath()else aR:SetRunningLuaFilePath()end;local aS=finale.FCString()aR:SplitToPathAndFile(nil,aS)local P=aS.LuaString;if not aQ then P=P:match("(.+)%..+")if not P or P==""then P=aS.LuaString end end;return P end;return L end)return a("__root")