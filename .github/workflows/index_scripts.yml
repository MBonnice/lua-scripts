# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  pull_request:
    branches: [ master ]
  push:
    branches: [ master ]
  

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
      name: creates text file with data for all .lua scripts

    - shell: bash
      run: |
        true > scripts.txt

        for f in *.lua
        do
            echo "FILE=$f" >> scripts.txt
            passedFirstReturnStatement=false
            descriptionThisLine=false
            while read line; do
                if [[ "$line" == *"finaleplugin.Author"* && "$line" != *"finaleplugin.AuthorURL"* ]]; then
                    author=$(echo "$line" | cut -d'"' -f 2)
                    echo "AUTHOR=$author" >> scripts.txt
                elif [[ $passedFirstReturnStatement == false && "$line" == *"return"* ]]; then
                    name=$(echo "$line" | cut -d'"' -f 2)
                    echo "NAME=$name" >> scripts.txt
                    passedFirstReturnStatement=true
                    description=$(echo "$line" | cut -d'"' -f 6)
                    if [[ $description == '' ]]; then
                        descriptionThisLine=true
                    else
                        echo "DESCRIPTION=$description" >> scripts.txt
                    fi
                elif [[ "$line" == *"finaleplugin.Version"* ]]; then
                    version=$(echo "$line" | cut -d'"' -f 2)
                    echo "VERSION=$version" >> scripts.txt
                elif [[ "$line" == *"finaleplugin.CategoryTags"* ]]; then
                    tags=$(echo "$line" | cut -d'"' -f 2)
                    echo "CATEGORYTAGS=$tags" >> scripts.txt
                elif [[ "$line" == *"finaleplugin.Date"* ]]; then
                    date=$(echo "$line" | cut -d'"' -f 2)
                    echo "DATE=$date" >> scripts.txt
                elif [[ $descriptionThisLine == true ]]; then
                    description=$(echo "$line" | cut -d'"' -f 2)
                    echo "DESCRIPTION=$description" >> scripts.txt
                    descriptionThisLine=false
                fi
            done < $f
            echo "" >> scripts.txt
        done
    - uses: actions/upload-artifact@v2
      with:
        name: scripts
        path: scripts.txt
    - name: Clones repo
      run: |
        rm scripts.txt
        REMOTE=https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
        git config user.email "${{ github.actor }}@users.noreply.github.com"
        git config user.name "${{ github.actor }}"

        git pull ${REMOTE}
        git fetch
        git checkout gh-pages
    - name: Retrieves artifact
      uses: actions/download-artifact@v2
      with:
        name: scripts
    - name: Pushes scripts to repo
      run: |
        scriptsChanged=$(git status)
        if [[ $scriptsChanged == *"scripts.txt"* ]]; then
          git add scripts.txt
          git commit -am "Updated scripts.txt"
          git push ${REMOTE}
        fi
